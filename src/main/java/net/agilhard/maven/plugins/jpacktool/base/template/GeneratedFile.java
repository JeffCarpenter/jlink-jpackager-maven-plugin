
package net.agilhard.maven.plugins.jpacktool.base.template;

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


import freemarker.template.Configuration;
import freemarker.template.TemplateException;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.Map;

/**
 * File to be generated by freemarker.
 */
public class GeneratedFile {

  private final Configuration cfg;
  @SuppressWarnings("rawtypes")
private final Map model;
  private final String templateName;
  private final File outputFile;

  /**
   * Creates a file to be generated.
   *
   * @param cfg the freemarker configuration
   * @param model the freemarker model
   * @param templateName the name of the freemarker template
   * @param outputFile the output file
   */
  public GeneratedFile(Configuration cfg, @SuppressWarnings("rawtypes") Map model, String templateName, File outputFile) {
    this.cfg = cfg;
    this.model = model;
    this.templateName = templateName;
    this.outputFile = outputFile;
  }

  /**
   * Generates the file.
   *
   * @throws IOException if writing to file failed
   * @throws TemplateException if some template error
   */
  public void generate() throws IOException, TemplateException {
    try (Writer writer = new FileWriter(outputFile)) {
      cfg.getTemplate(templateName).process(model, writer);
    }
  }
}
